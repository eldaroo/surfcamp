import { NextResponse } from 'next/server';
import axios from 'axios';

// Configuraci√≥n de Green API
const GREEN_API_URL = process.env.GREEN_API_URL || 'https://api.green-api.com';
const GREEN_API_INSTANCE = process.env.GREEN_API_INSTANCE;
const GREEN_API_TOKEN = process.env.GREEN_API_TOKEN;

// Funci√≥n para formatear n√∫mero de tel√©fono
const formatPhoneNumber = (phone: string): string => {
  // Remover espacios, guiones y par√©ntesis
  let cleaned = phone.replace(/[\s\-\(\)]/g, '');
  
  // Si no empieza con +, agregar c√≥digo de pa√≠s por defecto
  if (!cleaned.startsWith('+')) {
    // Si empieza con 0, removerlo (formato argentino)
    if (cleaned.startsWith('0')) {
      cleaned = cleaned.substring(1);
    }
    // Agregar c√≥digo de pa√≠s Argentina por defecto
    cleaned = '+54' + cleaned;
  }
  
  // Formato para Green API (sin + y con @c.us)
  return cleaned.replace('+', '') + '@c.us';
};

// Plantillas de mensajes
const messageTemplates = {
  booking_confirmation: (data: any) => `üèÑ‚Äç‚ôÇÔ∏è *CONFIRMACI√ìN DE RESERVA*
*Surfcamp Santa Teresa*

‚úÖ ¬°Tu reserva ha sido confirmada!

üìÖ *Fechas:* ${data.checkIn} - ${data.checkOut}
üè† *Alojamiento:* ${data.roomType}
üë• *Hu√©spedes:* ${data.guests}
üìû *Referencia:* ${data.bookingReference}

üí∞ *Total:* $${data.total}

üìç *Ubicaci√≥n:* Santa Teresa, Costa Rica
üèÑ‚Äç‚ôÇÔ∏è ¬°Te esperamos para una experiencia incre√≠ble!

_Cualquier consulta responde a este mensaje_
*Surfcamp Santa Teresa*
Powered by zeneidas`,

  booking_reminder: (data: any) => `üèÑ‚Äç‚ôÇÔ∏è *RECORDATORIO DE RESERVA*
*Surfcamp Santa Teresa*

¬°Hola ${data.guestName}!

‚è∞ Tu check-in es ma√±ana: ${data.checkIn}
üè† ${data.roomType}
üìû Referencia: ${data.bookingReference}

üìã *Qu√© traer:*
‚Ä¢ Documentos de identidad
‚Ä¢ Traje de ba√±o
‚Ä¢ Protector solar
‚Ä¢ Ganas de surfear! üèÑ‚Äç‚ôÇÔ∏è

üìç *Direcci√≥n:* Santa Teresa, Costa Rica
üïí *Check-in:* 14:00 hrs

¬°Nos vemos pronto!
*Surfcamp Santa Teresa*`,

  welcome_message: (data: any) => `üèÑ‚Äç‚ôÇÔ∏è *¬°BIENVENIDO A SURFCAMP SANTA TERESA!*

¬°Hola ${data.guestName}!

‚úÖ Check-in completado
üè† ${data.roomType}
üìû Referencia: ${data.bookingReference}

üåä *Informaci√≥n importante:*
‚Ä¢ WiFi: SurfcampST / Password: 123456
‚Ä¢ Clases de surf: 8:00 AM y 2:00 PM
‚Ä¢ Desayuno: 7:00 - 10:00 AM
‚Ä¢ Check-out: 11:00 AM

üì± *Contacto de emergencia:* +506 XXXX-XXXX
üèÑ‚Äç‚ôÇÔ∏è ¬°Disfruta tu estad√≠a!

*Surfcamp Santa Teresa*
Powered by zeneidas`
};

export async function POST(request: Request) {
  try {
    if (!GREEN_API_INSTANCE || !GREEN_API_TOKEN) {
      return NextResponse.json({
        error: 'Green API no est√° configurada. Verifica GREEN_API_INSTANCE y GREEN_API_TOKEN'
      }, { status: 500 });
    }

    const { phone, template, data } = await request.json();

    if (!phone || !template || !data) {
      return NextResponse.json({
        error: 'Faltan par√°metros: phone, template, data'
      }, { status: 400 });
    }

    // Verificar que la plantilla existe
    if (!messageTemplates[template as keyof typeof messageTemplates]) {
      return NextResponse.json({
        error: `Plantilla '${template}' no encontrada`
      }, { status: 400 });
    }

    // Formatear n√∫mero de tel√©fono
    const formattedPhone = formatPhoneNumber(phone);
    
    // Generar mensaje usando la plantilla
    const messageText = messageTemplates[template as keyof typeof messageTemplates](data);

    // Enviar mensaje via Green API
    const response = await axios.post(
      `${GREEN_API_URL}/waInstance${GREEN_API_INSTANCE}/sendMessage/${GREEN_API_TOKEN}`,
      {
        chatId: formattedPhone,
        message: messageText
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );

    console.log('üì± WhatsApp enviado exitosamente:', {
      phone: formattedPhone,
      template,
      messageId: response.data.idMessage,
      response: response.data
    });

    return NextResponse.json({
      success: true,
      messageId: response.data.idMessage,
      phone: formattedPhone,
      template,
      message: 'Mensaje enviado exitosamente'
    });

  } catch (error: any) {
    console.error('‚ùå Error enviando WhatsApp:', error);
    
    return NextResponse.json({
      error: 'Error enviando mensaje de WhatsApp',
      details: error.response?.data || error.message
    }, { status: 500 });
  }
}

// Endpoint para obtener informaci√≥n de instancia
export async function GET(request: Request) {
  try {
    if (!GREEN_API_INSTANCE || !GREEN_API_TOKEN) {
      return NextResponse.json({
        error: 'Green API no est√° configurada'
      }, { status: 500 });
    }

    const response = await axios.get(
      `${GREEN_API_URL}/waInstance${GREEN_API_INSTANCE}/getStateInstance/${GREEN_API_TOKEN}`
    );

    return NextResponse.json({
      instance: GREEN_API_INSTANCE,
      state: response.data.stateInstance,
      configured: true
    });

  } catch (error: any) {
    return NextResponse.json({
      error: 'Error obteniendo estado de instancia',
      details: error.response?.data || error.message
    }, { status: 500 });
  }
} 