"use strict";exports.id=614,exports.ids=[614],exports.modules={3614:(e,o,t)=>{t.d(o,{b:()=>r});var s=t(7117);let a=process.env.LOBBYPMS_BASE_URL||"https://api.lobbypms.com/api/v1",n=process.env.LOBBYPMS_API_TOKEN||"JNjeoLeXxTHFQSwUPQCgwBnCZktRVv7pfQ48uz2tyoNu6K9dW6D2US1cN9Mu";let LobbyPMSClient=class LobbyPMSClient{constructor(e=a,o=n){this.baseURL=e,this.apiToken=o}buildURL(e,o){let t=e.startsWith("/")?e.slice(1):e,s=this.baseURL.endsWith("/")?this.baseURL:this.baseURL+"/",a=new URL(t,s);return a.searchParams.set("api_token",this.apiToken),o&&Object.entries(o).forEach(([e,o])=>{a.searchParams.set(e,o)}),console.log("\uD83D\uDD27 URL BUILD DEBUG:",{originalEndpoint:e,cleanEndpoint:t,baseUrl:s,finalUrl:a.toString()}),a.toString()}async getRooms(e){try{let o,t;let a=this.buildURL("/rooms",e);console.log("\uD83D\uDD0D ===== URL CONSTRUCTION ANALYSIS ====="),console.log("\uD83D\uDD0D Base URL:",this.baseURL),console.log("\uD83D\uDD0D API Token:",this.apiToken),console.log("\uD83D\uDD0D Endpoint:","/rooms"),console.log("\uD83D\uDD0D Params:",e),console.log("\uD83D\uDD0D Final constructed URL:",a),console.log("\uD83D\uDD0D ===== COMPARISON ====="),console.log("\uD83D\uDD0D Working Postman URL: https://api.lobbypms.com/api/v1/rooms?api_token=JNjeoLeXxTHFQSwUPQCgwBnCZktRVv7pfQ48uz2tyoNu6K9dW6D2US1cN9Mu"),console.log("\uD83D\uDD0D App constructed URL:",a),console.log("\uD83D\uDD0D URLs match:","https://api.lobbypms.com/api/v1/rooms?api_token=JNjeoLeXxTHFQSwUPQCgwBnCZktRVv7pfQ48uz2tyoNu6K9dW6D2US1cN9Mu"===a);try{if(console.log("\uD83D\uDE80 Making request to:",a),t=(o=await s.Z.get(a,{timeout:1e4,headers:{Accept:"application/json","Content-Type":"application/json","User-Agent":"SurfCampSantaTeresa/1.0"}})).data,console.log("\uD83D\uDCE5 Response received - Status:",o.status),console.log("\uD83D\uDCE5 Response Content-Type:",o.headers["content-type"]),console.log("\uD83D\uDCE5 Response Data Type:",typeof t),console.log("\uD83D\uDCE5 Response Size:",JSON.stringify(t).length,"characters"),"string"==typeof t&&t.includes("<!doctype html>")){console.log("\uD83D\uDEA8 ===== CRITICAL ERROR: HTML RESPONSE ====="),console.log("\uD83D\uDEA8 Expected: JSON data"),console.log("\uD83D\uDEA8 Received: HTML page"),console.log("\uD83D\uDEA8 This means the API endpoint is not working correctly"),console.log("\uD83D\uDEA8 Possible causes:"),console.log("   1. Wrong API endpoint URL"),console.log("   2. Invalid API token"),console.log("   3. API server routing issue"),console.log("   4. Authentication/authorization problem"),console.log("\uD83D\uDEA8 HTML content (first 300 chars):",t.substring(0,300));let e=t.match(/<title>(.*?)<\/title>/);throw e&&console.log("\uD83D\uDEA8 HTML Page Title:",e[1]),Error("LobbyPMS API returned HTML instead of JSON. This indicates an API endpoint or authentication issue.")}console.log("‚úÖ Valid JSON response received")}catch(n){if(console.error("‚ùå Request failed:",{message:n.message,status:n.response?.status,statusText:n.response?.statusText,url:a,responseType:typeof n.response?.data,responseLength:n.response?.data?.length||0}),e&&Object.keys(e).length>0){console.log("\uD83D\uDD04 Trying without parameters as fallback...");let e=this.buildURL("/rooms");if(console.log("\uD83D\uDD04 Fallback URL:",e),t=(o=await s.Z.get(e,{timeout:1e4,headers:{Accept:"application/json","Content-Type":"application/json","User-Agent":"SurfCampSantaTeresa/1.0"}})).data,console.log("\uD83D\uDCE5 Fallback response - Status:",o.status),console.log("\uD83D\uDCE5 Fallback response - Content-Type:",o.headers["content-type"]),console.log("\uD83D\uDCE5 Fallback response - Data Type:",typeof t),"string"==typeof t&&t.includes("<!doctype html>"))throw console.log("\uD83D\uDEA8 Fallback also returned HTML - API endpoint is definitely broken"),Error("LobbyPMS API consistently returns HTML instead of JSON. API endpoint is not working.")}else throw n}console.log("\uD83D\uDCE5 LobbyPMS ROOMS API SUMMARY:"),console.log("   Status Code:",o.status),console.log("   Content-Type:",o.headers["content-type"]),console.log("   Response Type:",typeof t),console.log("   Response Size:",JSON.stringify(t).length,"characters"),console.log("   Has .data property:",!!(t&&"data"in t)),console.log("   Categories count:",t?.data?.length||0),console.log("   \uD83D\uDD0D REQUEST URL:",this.buildURL("/rooms",e)),console.log("   \uD83D\uDD0D REQUEST PARAMS:",e),console.log("   \uD83D\uDD0D API TOKEN (last 8 chars):",this.apiToken.slice(-8)),"string"==typeof t&&t.includes("<!doctype html>")&&(console.log("‚ùå CRITICAL: API returned HTML page instead of JSON data"),console.log("‚ùå This usually means:"),console.log("   1. Wrong API endpoint URL"),console.log("   2. Invalid API token"),console.log("   3. API server is down"),console.log("   4. Rate limiting or IP blocking"),console.log("‚ùå HTML Title:",t.match(/<title>(.*?)<\/title>/)?.[1]||"No title found"));let n=t?.data||[];console.log("\uD83D\uDCCA Extracted categories:",n.length),n.length>0&&console.log("\uD83D\uDCCA First category structure:",JSON.stringify(n[0],null,2));let r=[];return n.forEach((e,o)=>{if(console.log(`üè† Processing category ${o+1}:`,{id:e.category_id,name:e.name,capacity:e.capacity,quantity:e.quantity,roomsCount:e.rooms?.length||0}),e.rooms&&Array.isArray(e.rooms)){let o={id:e.category_id?.toString()||"",name:e.name||"Unknown Room",room_type_id:e.category_id?.toString()||"",room_type_name:e.name||"Unknown Room",available_rooms:e.quantity||1,capacity:e.capacity||2,price_per_night:void 0,rate:void 0};console.log(`‚úÖ Added room:`,o),r.push(o)}else console.log(`‚ùå Category ${e.name} has no valid rooms array`)}),console.log("\uD83C\uDFAF Final rooms array:",r.length,"rooms"),r}catch(s){console.error("‚ùå LobbyPMS getRooms DETAILED ERROR:",{message:s.message,status:s.response?.status,statusText:s.response?.statusText,headers:s.response?.headers,data:"string"==typeof s.response?.data?s.response.data.substring(0,200):s.response?.data,stack:s.stack,url:this.buildURL("/rooms",e),config:{baseURL:this.baseURL,tokenLastChars:this.apiToken.slice(-8),paramsUsed:e}});let o=`LobbyPMS API Error: ${s.message}`;s.response?.status===401?o="Error de autenticaci\xf3n: Token API inv\xe1lido o expirado":s.response?.status===403?o="Error de permisos: No tienes acceso a este recurso":s.response?.status===404?o="Error de endpoint: La URL del API no es correcta":s.response?.status===429?o="Error de l\xedmite: Demasiadas solicitudes, intenta m\xe1s tarde":s.response?.status>=500?o="Error del servidor: El servidor de LobbyPMS est\xe1 experimentando problemas":"ECONNREFUSED"===s.code?o="Error de conexi\xf3n: No se puede conectar al servidor de LobbyPMS":"ENOTFOUND"===s.code?o="Error de DNS: No se puede resolver la URL del API":"ETIMEDOUT"===s.code&&(o="Error de timeout: La solicitud tard\xf3 demasiado tiempo");let t=Error(o);throw t.originalError=s,t.statusCode=s.response?.status,t.apiUrl=this.buildURL("/rooms",e),t}}async getBookings(e){try{let o=await s.Z.get(this.buildURL("/bookings",e),{timeout:1e4});return o.data||[]}catch(e){throw console.error("LobbyPMS getBookings error:",e),e}}async createBooking(e){try{let o=await s.Z.post(this.buildURL("/bookings"),e,{headers:{"Content-Type":"application/json"},timeout:15e3});return o.data}catch(e){throw console.error("LobbyPMS createBooking error:",e),e}}async getRates(e){try{let o=await s.Z.get(this.buildURL("/rates",e),{timeout:1e4});return o.data||[]}catch(e){throw console.error("LobbyPMS getRates error:",e),e}}async getProducts(){try{let e=await s.Z.get(this.buildURL("/products"),{timeout:1e4});return e.data||[]}catch(e){throw console.error("LobbyPMS getProducts error:",e),e}}async getClients(e){try{let o=await s.Z.get(this.buildURL("/clients",e),{timeout:1e4});return o.data||[]}catch(e){throw console.error("LobbyPMS getClients error:",e),e}}async getAvailableRooms(e){try{let o=e.start_date.includes("T")?e.start_date.split("T")[0]:e.start_date,t=e.end_date.includes("T")?e.end_date.split("T")[0]:e.end_date,a={start_date:o,end_date:t};e.category_id&&(a.category_id=e.category_id);let n=this.buildURL("/available-rooms",a);console.log("\uD83D\uDD0D ===== LOBBY PMS AVAILABLE ROOMS API ====="),console.log("\uD83D\uDD0D Endpoint: /available-rooms (CORRECT per documentation)"),console.log("\uD83D\uDD0D Start date:",o),console.log("\uD83D\uDD0D End date:",t),console.log("\uD83D\uDD0D Category ID:",e.category_id||"All categories"),console.log("\uD83D\uDD0D Final URL:",n);let r=await s.Z.get(n,{timeout:15e3,headers:{Accept:"application/json","Content-Type":"application/json","User-Agent":"SurfCampSantaTeresa/1.0"}}),l=r.data;if(console.log("\uD83D\uDCE5 ===== API RESPONSE ANALYSIS ====="),console.log("\uD83D\uDCE5 Status:",r.status),console.log("\uD83D\uDCE5 Content-Type:",r.headers["content-type"]),console.log("\uD83D\uDCE5 Response Type:",typeof l),console.log("\uD83D\uDCE5 Has data property:",!!(l&&"data"in l)),console.log("\uD83D\uDCE5 Data length:",l?.data?.length||0),!l||"object"!=typeof l)throw Error("Invalid response format from LobbyPMS API");if("string"==typeof l&&(l.includes("<!doctype html>")||l.includes("<html")||l.includes("<!DOCTYPE"))){let e=l.match(/<title>(.*?)<\/title>/i),o=e?e[1]:"Unknown HTML page";throw console.error("\uD83D\uDEA8 LobbyPMS returned HTML page instead of JSON:"),console.error("\uD83D\uDEA8 Page title:",o),console.error("\uD83D\uDEA8 HTML preview:",l.substring(0,300)),Error(`LobbyPMS API returned HTML page "${o}" instead of JSON - possible IP authorization or API token issue`)}console.log("‚úÖ Valid JSON response received from LobbyPMS");let i=l.data||[];if(console.log("\uD83D\uDCCA Response summary:"),console.log("   \uD83D\uDCC5 Days returned:",i.length),i.length>0&&(console.log("   \uD83D\uDCC5 First day:",i[0].date),console.log("   \uD83C\uDFE0 Categories in first day:",i[0].categories?.length||0),i[0].categories&&i[0].categories.length>0)){let e=i[0].categories[0];console.log("   \uD83C\uDFE0 First category example:",{id:e.category_id,name:e.name,available_rooms:e.available_rooms,prices:e.prices})}return i}catch(a){let o=a.response?.data,t="string"==typeof o&&(o.includes("<!doctype html>")||o.includes("<html")||o.includes("<!DOCTYPE"));console.error("‚ùå LOBBY PMS AVAILABLE ROOMS ERROR:",{message:a.message,status:a.response?.status,statusText:a.response?.statusText,responseType:typeof o,isHtmlResponse:t,responsePreview:"string"==typeof o?o.substring(0,300):o,requestUrl:this.buildURL("/available-rooms",{start_date:e.start_date.includes("T")?e.start_date.split("T")[0]:e.start_date,end_date:e.end_date.includes("T")?e.end_date.split("T")[0]:e.end_date,...e.category_id&&{category_id:e.category_id}}),apiToken:this.apiToken.slice(-8)});let s=`LobbyPMS available rooms API failed: ${a.message}`;if(t){let e=o.match(/<title>(.*?)<\/title>/i),t=e?e[1]:"Unknown page";s=`LobbyPMS API returned HTML page "${t}" instead of JSON - check IP authorization and API token`}throw Error(s)}}isConfigured(){let e=!!(this.apiToken&&"your_api_token_here"!==this.apiToken&&this.apiToken.length>20&&!this.apiToken.includes("placeholder")),o=!!(this.baseURL&&"https://your-api-url.com"!==this.baseURL&&!this.baseURL.includes("placeholder")&&this.baseURL.includes("lobbypms.com"));return console.log("\uD83D\uDD27 LobbyPMS Configuration Check:",{hasValidToken:e,hasValidURL:o,tokenLength:this.apiToken?.length||0,baseURL:this.baseURL,isConfigured:e&&o}),e&&o}async testConnection(){try{return await this.getAvailableRooms({start_date:"2025-01-01",end_date:"2025-01-02"}),!0}catch(e){return!1}}};let r=new LobbyPMSClient}};